{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/12/17/lessons-from-creating-my-first-godot-game/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"51985c30-7bb8-5bb5-8911-273c1ca6838f","excerpt":"Hello aspiring game devs! As you know from my previous post I’ve been getting into Godot, and I’m pretty excited. As I follow this course on Udemy, after every…","html":"<p>Hello aspiring game devs! As you know from my previous post I’ve been getting into Godot, and I’m pretty excited.</p>\n<p>As I follow this <a href=\"https://www.udemy.com/course/godot/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">course on Udemy</a>, after every tutorial I try to make a game. I always make a game that’s harder than what I just worked on. This way, I get to practice what I learn but I’m also forced to learn new things without a guided hand. While painful, it deepens my understanding of what’s going on.</p>\n<p>Since my last project, here are some technical bits I’ve picked up on that I’ll carry with me for future projects.</p>\n<h2>Folder Structure</h2>\n<p>In all development languages/frameworks, structure is a matter of personal taste and project size. For very small games or quick prototypes, you can get by with a flat structure. The one I’ve settled with for my small projects is:</p>\n<div class=\"gatsby-highlight\" data-language=\"plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">|- assets\n |- audio\n |- fonts\n |- images\n|- scenes\n|- scripts</code></pre></div>\n<p>In whatever way it’s done, the majority of the community prefers to separate the scenes from the scripts. Some larger games also have hierarchies in their <code class=\"language-text\">scenes</code> and <code class=\"language-text\">scripts</code> folders as the need arises.</p>\n<h2>Safely Checking for Nodes and Properties</h2>\n<p>This is nothing big but it’s something I’ll probably forget. If you want to check if a node exists in a scene, use this code snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"gdscript\"><pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">if</span> some_cool_node<span class=\"token punctuation\">.</span><span class=\"token function\">has_node</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node_that_might_exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>But to check if a node has a property, like one you’ll edit in the GUI, simply do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"gdscript\"><pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">if</span> some_cool_node<span class=\"token punctuation\">.</span>property_that_might_exist<span class=\"token punctuation\">:</span></code></pre></div>\n<h2>A Menu Buttons Scene</h2>\n<p>A YouTube video I can’t find anymore :-( showed me this awesome technique for making menu buttons. After creating a basic menu button scene, attach this script to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"gdscript\"><pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">extends</span> <span class=\"token class-name\">TextureButton</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> scene_to_load\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> quit_game\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">_ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>We add two variables that can be configured in the GUI for menu buttons. The <code class=\"language-text\">scene_to_load</code> takes a resource path of which scene the menu button should load when it’s clicked. The <code class=\"language-text\">quit_game</code> flag tells us if this button is being used to quit the game.</p>\n<p>Then, attach a script similar to this for your menu scene:</p>\n<div class=\"gatsby-highlight\" data-language=\"gdscript\"><pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">extends</span> <span class=\"token class-name\">MarginContainer</span>\n\n<span class=\"token keyword\">var</span> scene_path_to_load <span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token keyword\">onready</span> <span class=\"token keyword\">var</span> MenuButtons <span class=\"token operator\">=</span> <span class=\"token variable\">$CenterContainer</span><span class=\"token operator\">/</span>HBoxContainer<span class=\"token operator\">/</span>MenuButtons\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">_ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    MenuButtons<span class=\"token punctuation\">.</span><span class=\"token function\">get_child</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">grab_focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> button <span class=\"token keyword\">in</span> MenuButtons<span class=\"token punctuation\">.</span><span class=\"token function\">get_children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        button<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pressed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_on_Button_pressed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>button<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">_on_Button_pressed</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> button<span class=\"token punctuation\">.</span>quit_game<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">get_tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    scene_path_to_load <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span>scene_to_load\n    <span class=\"token variable\">$FadeIn</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$FadeIn</span><span class=\"token punctuation\">.</span><span class=\"token function\">fade_in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">_on_FadeIn_fade_finished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">get_tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">change_scene</span><span class=\"token punctuation\">(</span>scene_path_to_load<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the ready function, we do two things: highlight the first menu button that’s added to the scene and connect the <code class=\"language-text\">pressed</code> event of the menu buttons to our <code class=\"language-text\">_on_Button_pressed</code> function. Using the for loop allows us to use one function to handle button presses for all the menu options.</p>\n<p>The <code class=\"language-text\">_on_Button_pressed</code> function checks if a button is being used to quit the game, and handles that separately. For all other buttons, store what scene it was meant to load and play a fade animation.</p>\n<p>Once the animation is complete, we’ll switch to that scene stored in <code class=\"language-text\">scene_path_to_load</code>. This very simple setup makes scene switching in menus a breeze</p>\n<p>Happy game developing!</p>","frontmatter":{"title":"Lessons from Creating My First Godot Game","tags":["godot","game development"],"date":"2019-12-17","updated":null}},"previous":{"fields":{"slug":"/blog/2019/11/28/thoughts-after-making-my-first-godot-game"},"frontmatter":{"title":"Thoughts After Making My First Godot Game"}},"next":{"fields":{"slug":"/blog/2020/01/01/2019-was-a-good-year"},"frontmatter":{"title":"2019 Was a Good Year"}}},"pageContext":{"id":"51985c30-7bb8-5bb5-8911-273c1ca6838f","previousPostId":"5c3a469f-2887-5f3c-9463-d8cd3d3a0d0a","nextPostId":"361b9ade-f283-5395-954b-91cca42547f7"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}