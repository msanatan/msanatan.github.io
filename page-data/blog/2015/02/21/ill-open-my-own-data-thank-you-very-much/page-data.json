{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2015/02/21/ill-open-my-own-data-thank-you-very-much/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"7a04a993-6fda-548d-88c2-2b27bc9d7c77","excerpt":"Citizen of the world: You want information to be publicly accessible? Freedom of Information Unit is neither efficient nor transparent? Information publicly…","html":"<p>Citizen of the world: You want information to be publicly accessible? Freedom of Information Unit is neither efficient nor transparent? Information publicly available isn’t in a form you can easily use? Well my friend, web scraping might just be for you!</p>\n<h2>New Web Scraper On The Block</h2>\n<p>So I’m taking data from this page: <a href=\"https://www.ttconnect.gov.tt/gortt/portal/ttconnect/!ut/p/a1/04_Sj9CPykssy0xPLMnMz0vMAfGjzOK9A40MTD0tjQ38Aw0sDYyCPA1dDUy9jd2DDIEKIlEUBLm7ARW4mhp6eIcZGxgYEKffAAdwJKg_ODVPP1w_Cq8yLwMMBZjOBCvA446C3NCICs9MRwCWELx4/dl5/d5/L2dBISEvZ0FBIS9nQSEh/?WCM_GLOBAL_CONTEXT=/gortt/wcm/connect/gortt+web+content/TTConnect/Home/Government+Ministries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://www.ttconnect.gov.tt/gortt/portal/ttconnect/!ut/p/a1/04_Sj9CPykssy0xPLMnMz0vMAfGjzOK9A40MTD0tjQ38Aw0sDYyCPA1dDUy9jd2DDIEKIlEUBLm7ARW4mhp6eIcZGxgYEKffAAdwJKg_ODVPP1w_Cq8yLwMMBZjOBCvA446C3NCICs9MRwCWELx4/dl5/d5/L2dBISEvZ0FBIS9nQSEh/?WCM_GLOBAL_CONTEXT=/gortt/wcm/connect/gortt+web+content/TTConnect/Home/Government+Ministries\">https://www.ttconnect.gov.tt/gortt/portal/ttconnect/!ut/p/a1/04_Sj9CPykssy0xPLMnMz0vMAfGjzOK9A40MTD0tjQ38Aw0sDYyCPA1dDUy9jd2DDIEKIlEUBLm7ARW4mhp6eIcZGxgYEKffAAdwJKg_ODVPP1w_Cq8yLwMMBZjOBCvA446C3NCICs9MRwCWELx4/dl5/d5/L2dBISEvZ0FBIS9nQSEh/?WCM_GLOBAL_CONTEXT=/gortt/wcm/connect/gortt+web+content/TTConnect/Home/Government+Ministries</a></a>. It provides links to contact information of each Government Ministry. Pretty straightforward and could be useful to complement some other data. Having wrote web scrapers before, I stuck to what I know best: Python 2.7 with lxml and requests. Many alternatives exist - considering Python alone you can use Beautiful Soup, Scrapy, webscraping and other libraries. Other languages got myriads of choices as well, you’re not short of options.</p>\n<p>It can be pretty simple too! Just look at the following code snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">scrape_ministry</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''Given a url, scrape the website and return a Ministry object'''</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        page <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>HEADERS<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> requests<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>RequestException<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">'Could not reach the website'</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        tree <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n        content <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'//div[@class=\"portletMainContent\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        name <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'./h3/text()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        remaining_text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\r\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> content<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'.//p/text()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        address <span class=\"token operator\">=</span> remaining_text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'Address:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        telephone <span class=\"token operator\">=</span> parse_tel_nums<span class=\"token punctuation\">(</span>remaining_text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Telephone:'</span><span class=\"token punctuation\">)</span>\n        fax <span class=\"token operator\">=</span> parse_tel_nums<span class=\"token punctuation\">(</span>remaining_text<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fax:'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            website <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'p/a/text()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span>\n            website <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n        <span class=\"token keyword\">return</span> Ministry<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> telephone<span class=\"token punctuation\">,</span> fax<span class=\"token punctuation\">,</span> website<span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s where the main scraping occurs. After the requests library is used to retrieve the HTML of the webpage, I use lxml to manoeuvre through the HTML and take the information I want. XPath isn’t hard to learn, most of it should make sense once you know basic HTML. In all fairness the data I scraped was relatively well structured and easy - I’ve seen some ugly ones where these few lines won’t do. Check out the entire scraper in this <a href=\"https://gist.github.com/msanatan/f42ab4e1a3f63ae65138\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a>. Don’t be alarmed by the class and all the functions, I like encapsulation and I deliberately designed that code snippet with project scalability in mind!</p>\n<h2>Impatience Is A Virtue, Take The Reins</h2>\n<p>Now we’ve gone through the what, let’s discuss the why (hmm… shouldn’t this be the other way around?). Trinidad and Tobago has a civilian led Open Data portal - <a href=\"https://data.tt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://data.tt\">https://data.tt</a></a>. It’s growing quite well and I urge you all to show support by using the data, and offering to lend a hand if you can :). There is room for a lot more data though, and sometimes the available data is only stored in a proprietary format. <strong>Open Data shouldn’t be best accessible by proprietary software!</strong> So no to .xls and (a softer) no to .xlsx - an open standard led by a commercial entity may not be entirely interest free…</p>\n<p>And so I came up with my solution - do some web scraping and save it in vendor neutral formats like CSV and JSON (RDF for later). The goal is create 3 star and 5 star Open Data for anyone to use. 3/5 star? What am I talking about? I’m talking about Sir Tim Berners-Lee’s <a href=\"https://www.w3.org/DesignIssues/LinkedData.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">star scheme for Open Data</a> of course! Get familiar with it, and put the data you have available in perspective.</p>\n<h2>Scrape For A More Open Nation, A More Open World</h2>\n<p>Hopefully you’ll understand why I spent some time writing this scraper, it’s not just for hacking’s sake. It’s the start of a collection of government data that can be shared with anyone, anywhere. And I want you to do the same! Let’s make APIs for what we want to know. If the door to Open Data is closed, make your own key :)</p>","frontmatter":{"title":"I'll Open My Own Data, Thank You Very Much","tags":["open data","python","web scraping"],"date":"2015-02-21","updated":null}},"previous":{"fields":{"slug":"/blog/2015/01/11/throwing-2015-into-chaos-with-goals"},"frontmatter":{"title":"Throwing 2015 Into Chaos with Goals"}},"next":{"fields":{"slug":"/blog/2015/04/08/drinking-coffeejavascript-sip-on-mocha-and-chai-for-testing"},"frontmatter":{"title":"Drinking Coffee/JavaScript? Sip on Mocha and Chai for testing"}}},"pageContext":{"id":"7a04a993-6fda-548d-88c2-2b27bc9d7c77","previousPostId":"42d1dc71-c383-56a2-8f30-8b596f038768","nextPostId":"99b0201b-0123-5546-a8b4-7e51d5ea3663"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}