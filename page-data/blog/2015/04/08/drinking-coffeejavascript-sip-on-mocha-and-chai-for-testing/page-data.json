{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2015/04/08/drinking-coffeejavascript-sip-on-mocha-and-chai-for-testing/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"99b0201b-0123-5546-a8b4-7e51d5ea3663","excerpt":"So on the road to deeper JavaScript use and appreciation (the latter is the tricky one but so far it’s not too bad), I reached the point where I needed to step…","html":"<p>So on the road to deeper JavaScript use and appreciation (the latter is the tricky one but so far it’s not too bad), I reached the point where I needed to step my testing game up. Most programmers see it as a tedious process or feel bogged down by the deadline proximity and remaining features to implement. While I mostly code as a hobby, I have production code out in the wild so I better uphold good software development practices. Testing gives us confidence that our program works and makes it easy to see if any code change messed something up. It’s also good for your skin!</p>\n<h2>All These Drinks Are Keeping Me Warm</h2>\n<p><a href=\"https://mochajs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocha</a> seems the be on top of the food chain when it comes to testing frameworks for JavaScript. It’s a test runner - a healthy dose of automation that allows you to focus on writing and running test cases. It has a pretty neat way of dealing with asynchronous code by adding a callback and function call that lets it know to wait for a result. You can find similar behaviour and features with the <a href=\"https://jasmine.github.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jasmine</a> testing framework (which has a nearly identical API).</p>\n<p><a href=\"https://chaijs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chai</a> is an assertion library that can be used with testing frameworks. Assertion libraries are what you write the tests with. If you’re following the links you’ll notice that Chai calls itself a “BDD / TDD assertion library”. While Test Driven Development is pretty well-known, not so much is known about Behaviour Driven Development.</p>\n<h3>Detour - TDD &#x26; BDD</h3>\n<p>As a recap with TDD you:</p>\n<ol>\n<li>Write some test for features</li>\n<li>Watch those tests fail (because you haven’t written those features yet). If they pass figure out what sorcery is affecting your code before continuing - what’s a test if it can’t detect failure?</li>\n<li>Implement those features until you get to the point of passing those tests</li>\n<li>Clean up the code, for example refactoring to the original/ideal design while running those test to make sure nothing broke. Rinse and repeat!</li>\n</ol>\n<p>With BDD you do the same thing… uhhh what? Of course it’s not just that, the Agile Alliance has <a href=\"https://guide.agilealliance.org/guide/bdd.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a lot more to say</a> about their differences. The idea is that BDD describes the behaviour of the feature being implemented, not just its result. The requirements of the project map more closely to the tests you’ll write in BDD than in TDD. So while testing we’re actually thinking about how the system works. The most salient visible change you’ll see is how you write tests, BDD testing tools use more natural language syntax than their TDD counterparts.</p>\n<h2>Do You Even Code? (<a href=\"https://youtu.be/H2Diy0RNe_c?t=103\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gym Prank Voice</a>)</h2>\n<p>These days I’ve been working with CoffeeScript because it makes me smile :). Since I can’t release every bit of code I write (secret agent coder) I decided to do some testing for a Finite State Machine (FSM) acceptor I wrote not too long ago. For those not familiar with FSMs (or FSA, A for Automata) here’s a quick primer:</p>\n<p>An FSM is a (very) simple model of computation. An FSM has a set of states that it can be in, inputs for the states (alphabet), a start state, a set of accepting/finishing states (where the sequence of inputs are allowed to stop) and transition rules that say how we can move from one state to another.</p>\n<h3>Let’s Give It A Go</h3>\n<p>So we setup a class with all the attributes to model a FSM:</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FSM</span>\n\n  <span class=\"token property\">constructor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-member variable\">@states</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-member variable\">@initialState</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-member variable\">@transitions</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-member variable\">@acceptingStates</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span></code></pre></div>\n<p>and add a method to accept inputs, in this case an array of the inputs:</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"><span class=\"token property\">accepts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> currentState<span class=\"token operator\">=</span><span class=\"token class-member variable\">@initialState</span><span class=\"token punctuation\">,</span> trace<span class=\"token operator\">=</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">for</span> input <span class=\"token keyword\">in</span> sequence\n    <span class=\"token keyword\">try</span>\n      currentState <span class=\"token operator\">=</span> <span class=\"token class-member variable\">@accept</span> input<span class=\"token punctuation\">,</span> currentState<span class=\"token punctuation\">,</span> trace\n    <span class=\"token keyword\">catch</span> e\n      <span class=\"token keyword\">if</span> trace <span class=\"token keyword\">then</span> console<span class=\"token punctuation\">.</span>log e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n  <span class=\"token keyword\">return</span> currentState <span class=\"token keyword\">in</span> <span class=\"token class-member variable\">@acceptingStates</span></code></pre></div>\n<p>As you can see there’s a function called accept which given an input character and the current state returns the next state or an error if no such state is possible. And here’s how painless testing this function with BDD syntax could be:</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">describe <span class=\"token string\">'FSM accepts'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  it <span class=\"token string\">'should not accept 1'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    fsm1<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token keyword\">false</span>\n\n  it <span class=\"token string\">'should not accept 2'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    fsm1<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token keyword\">false</span>\n\n  it <span class=\"token string\">'should accept 12'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    fsm1<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token keyword\">true</span>\n\n  it <span class=\"token string\">'should not accept 121'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    fsm1<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token keyword\">false</span>\n\n  it <span class=\"token string\">'should accept 12222'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    fsm1<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token keyword\">true</span>\n\n  it <span class=\"token string\">'should not accept 1211'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    fsm1<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token keyword\">false</span></code></pre></div>\n<p>Not bad for the basics right? Describe what you’re testing and then get on with it. But wait, there’s more! It’s a good practice to isolate the environment on every test; in this case, we should have an FSM instance for each test case. By repeatedly initialising the FSM we’re sure that any side effects from a previous test would not matter in the current one. Mocha has a simple hook for just that:</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">beforeEach <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  fsm1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FSM</span> states<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> transitions<span class=\"token punctuation\">,</span> acceptingStates</code></pre></div>\n<p>With the above code we create a new FSM instance for each test. There are 3 other hooks available to you:</p>\n<ul>\n<li>afterEach - code that runs after every test case</li>\n<li>before - code that runs <strong>before any</strong> tests begin</li>\n<li>after - code that runs <strong>after all</strong> tests are completed</li>\n</ul>\n<p>Before I move on I’ll highlight another code snippet. This test uses TDD syntax instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">describe <span class=\"token string\">'FSM accept'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  it <span class=\"token string\">'should throw an error for bad initial input'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> fsm1<span class=\"token punctuation\">.</span>accept <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token keyword\">throw</span> BadInputError</code></pre></div>\n<p>I wanted to test that the error is thrown when it should. Note that I wrap the fsm1.accept 2, ‘A’ in a function (using <code class=\"language-text\">-></code> for those not CoffeeScript savvy). That’s because Chai tests if a function returns an error; just putting fsm1.accept would in essence make Chai test the result. This seems to be a common thing many people overlook, do yourself a favour and read them docs! <a href=\"https://gist.github.com/msanatan/1588c51ea0b71b3fc823\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here</a>’s the gist with all this code.</p>\n<p>Don’t think that this elegant testing is just for elegant mathematical models. Chai has some useful <a href=\"https://chaijs.com/plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">plugins</a> that could help you test your server HTTP responses. It helped me feel better about my express app’s behaviour.</p>\n<h2>Some Useful Reading</h2>\n<p>I’m quite happy with my experience of testing with Mocha and Chai. Now remember these are just tools for a software development methodology. Let’s try digging deeper into TDD and BDD. I’m particularly interested in BDD as it’s newer to me. Here are some links that may be useful to you:</p>\n<ul>\n<li>Introducing BDD - <a href=\"https://dannorth.net/introducing-bdd/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://dannorth.net/introducing-bdd/\">https://dannorth.net/introducing-bdd/</a></a></li>\n<li>What’s in a Story - <a href=\"https://dannorth.net/whats-in-a-story/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://dannorth.net/whats-in-a-story/\">https://dannorth.net/whats-in-a-story/</a></a></li>\n<li>Behaviour Driven Development with Javascript - <a href=\"https://github.com/gajus/gajus.com-blog/blob/master/posts/behaviour-driven-development-with-javascript/index.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://github.com/gajus/gajus.com-blog/blob/master/posts/behaviour-driven-development-with-javascript/index.md\">https://github.com/gajus/gajus.com-blog/blob/master/posts/behaviour-driven-development-with-javascript/index.md</a></a></li>\n<li>3 misconceptions about BDD - <a href=\"https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd\">https://www.thoughtworks.com/insights/blog/3-misconceptions-about-bdd</a></a></li>\n</ul>\n<p>My next step is to use the BDD development paradigm from project start to completion, I’ve only used testing tools after substantial code was already written. The requirements aware approach of BDD appeals to me more than TDD, which has come has come under lots of criticism. David Hansson, creator of Ruby on Rails, has an interesting blog post on <a href=\"https://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">why he came off TDD</a>. Would BDD eliminate his problems? Probably not, its TDD roots are the core of his issues. Even so, I’ll keep his qualms in mind and try it out myself! In any case, getting our hands dirty with testing would only help our software development processes and results. Happy hacking :).</p>","frontmatter":{"title":"Drinking Coffee/JavaScript? Sip on Mocha and Chai for testing","tags":["coffeescript","javascript","node.js","testing"],"date":"2015-04-08","updated":null}},"previous":{"fields":{"slug":"/blog/2015/02/21/ill-open-my-own-data-thank-you-very-much"},"frontmatter":{"title":"I'll Open My Own Data, Thank You Very Much"}},"next":{"fields":{"slug":"/blog/2015/04/20/error-after-error-installing-ubuntu-desktop-on-12-04-server-edition"},"frontmatter":{"title":"Error After Error Installing Ubuntu Desktop on 12.04 Server Edition"}}},"pageContext":{"id":"99b0201b-0123-5546-a8b4-7e51d5ea3663","previousPostId":"7a04a993-6fda-548d-88c2-2b27bc9d7c77","nextPostId":"82f83cca-32d4-5e38-a938-3116d531d481"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}