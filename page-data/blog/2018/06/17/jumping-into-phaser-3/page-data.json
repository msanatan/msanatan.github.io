{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/06/17/jumping-into-phaser-3/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"1be4e115-6914-5ee7-8cc0-b8c3519ca8f1","excerpt":"Phaser 3 is a popular HTML5 game framework. The new version brings massive changes to key elements of version 2’s API and to the credit of the developers, made…","html":"<p><a href=\"https://phaser.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Phaser 3</a> is a popular HTML5 game framework. The new version brings massive changes to key elements of version 2’s API and to the credit of the developers, made a lot of the underlying architecture and code simpler and more efficient. Since its launch February 13th 2018, a whopping 10 new feature updates have been released, excluding bug fixes, at the time of writing. The good news is that things are fairly settled now and with docs covering more and more of the API it’s really the best time to get started!</p>\n<p>The best way to acquaint yourself with Phaser 3 is to make a game of course. I decided on a simple platformer with a level designed with <a href=\"https://www.mapeditor.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tiled</a>. Because my artistry is as good as my mumble rap translation skills, I literally created a game full of rectangles. It’s name is <a href=\"https://github.com/msanatan/boxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">boxy</a>. Here are some of my thoughts while working on it:</p>\n<h2>&#x3C;Steve Balmer Voice>Examples, Examples, Examples…&#x3C;/Steve Balmer Voice></h2>\n<p>To be fair, this was true for Phaser 2 as well. The best way to learn Phaser is to think about your game, what you’re trying to do, which aspect of the API it invovles and then find an example to see it in action. Though I expect the increased documentation cover to make things easier, there were quite a few times I found myself deep into <a href=\"https://labs.phaser.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://labs.phaser.io\">https://labs.phaser.io</a></a> and the source code on GitHub. Luckily there are numerous examples which cover just about everything and the source code is dead easy to read and follow. The answer is never far away :-)</p>\n<h2>Tiled Integration</h2>\n<p>This generally works really well, it’s quite easy to load tiles on the screen and set things up for collision with various conditions and parameters. One key feature missing was importing from the object layer. So for those less familiar with Tiled, think of a level in Mario. The ground and blocks you jump on would usually reside in some tilelayer. Something like the coins you collect in the game would reside in the object layer, the nature of the items placed are quite different.</p>\n<p>Phaser 3 doesn’t have an import for objects in the object layer as Phaser 2 does. The beauty of open source means we can just see what Phaser 2 did and adapt it to our game!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Loosely based on https://github.com/photonstorm/phaser-ce/blob/v2.10.5/src/tilemap/Tilemap.js#L379</span>\n<span class=\"token function\">createFromObjects</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">map<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> tileset<span class=\"token punctuation\">,</span> frameId<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">,</span> gravity<span class=\"token punctuation\">,</span> immovable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> objectLayers <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">;</span>\n    objectLayers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ol</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ol<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ol<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">olObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> group<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>olObject<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> olObject<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> tileset<span class=\"token punctuation\">,</span> frameId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowGravity</span><span class=\"token punctuation\">(</span>gravity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            obj<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>immovable <span class=\"token operator\">=</span> immovable<span class=\"token punctuation\">;</span>\n            group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not the end of the world right? In my case, I wanted those objects to have their gravity and immovable properties all set to the same values. The objects I loaded would be in one sprite group. To make this work you also need to set the values of those properties while creating the sprite group:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>collidingBlocks <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>physics<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">allowGravity</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">immovable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you don’t set it in both places, it won’t work.</p>\n<h2>Phaser CLI</h2>\n<p>The first time I looked at this <a href=\"/blog/2017/11/06/phaser-es2015-and-breakout\">tool to transpile ES2015+ code</a>, I felt that it wasn’t ready for primetime. Since then it’s become the create-react-app of Phaser development and it is the best option I’ve seen to give you wings. I highly recommend you give this a go and I’ll be aiming to support this project as much as I can. Excellent work by <a href=\"https://github.com/nerdenough\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nerdenough</a>.</p>\n<p>During my time working on boxy I literally came into a crazy <a href=\"https://github.com/phaser-cli/phaser-cli/issues/16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bug</a>, as I almost always run into an edge case in my programming life -_-. For some weird reason, if I try to load a bitmap font before loading my tilemap then I’d get an error. We’re looking into it more. Thankfully that’s the only issue I’ve come across so far but it really had me scratching my head for a while.</p>\n<h2>The End Of The Beginning</h2>\n<p>Overall I love working with Phaser 3 and I’m completely pumped to be making more web games. While relatively new it has a lot of support and the updates are becoming more standard and better paced as time goes on. There’s also an amazing community of Phaser developers you can find on <a href=\"https://www.html5gamedevs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://www.html5gamedevs.com\">https://www.html5gamedevs.com</a></a>, <a href=\"https://itch.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://itch.io\">https://itch.io</a></a>, twitter, practically anywhere. You definitely found one on this blog.</p>\n<p>Happy game developing!</p>","frontmatter":{"title":"Jumping Into Phaser 3","tags":["javascript","phaser","game development"],"date":"2018-06-17","updated":null}},"previous":{"fields":{"slug":"/blog/2018/03/25/adding-more-hops-to-your-brew"},"frontmatter":{"title":"Adding More Hops to Your Brew"}},"next":{"fields":{"slug":"/blog/2018/08/15/revert-mysql-from-8-to-5-in-homebrew"},"frontmatter":{"title":"Revert MySQL from 8 to 5.7 with Homebrew"}}},"pageContext":{"id":"1be4e115-6914-5ee7-8cc0-b8c3519ca8f1","previousPostId":"265685bf-0723-590f-8d85-ccdf7f5ddc41","nextPostId":"edb3a62d-4fcc-5fe2-b29a-0f0b08842985"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}