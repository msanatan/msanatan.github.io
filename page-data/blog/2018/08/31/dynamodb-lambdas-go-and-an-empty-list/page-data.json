{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/08/31/dynamodb-lambdas-go-and-an-empty-list/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"8488a051-81f1-5a78-a565-5e07a86fc78c","excerpt":"Hello AWS Denizens, Serverless architecture has come into the forefront as my workplace leverages lambdas to great effect. Some of the projects we work at…","html":"<p>Hello AWS Denizens,</p>\n<p>Serverless architecture has come into the forefront as my workplace leverages lambdas to great effect. Some of the projects we work at involve a variety of AWS services like AppSync (GraphQL), DynamoDB and Cloudwatch to name a few. While doing some API development, I ran into an issue setting up a lambda to resolve a GraphQL query.</p>\n<p>Here’s the scenario:</p>\n<ul>\n<li>We got a GraphQL schema that defines an Item</li>\n<li>Item is stored in DynamoDB</li>\n<li>Item has many properties, including a property <code class=\"language-text\">subItems</code> of list type of SubItems</li>\n<li>We need to write a mutation for the <code class=\"language-text\">items</code> that adds a new element to <code class=\"language-text\">subItems</code>\n<ul>\n<li>We’ll override the current list with the one we provide</li>\n</ul>\n</li>\n<li>This logic will be used in a lambda written in Go for some preprocessing of data</li>\n</ul>\n<p>I found this following helpful guide online that showed how to update a list contained in a type like Item using the <code class=\"language-text\">SET</code> operator: <a href=\"https://medium.com/@joshua.a.kahn/building-a-dynamodb-list-resolver-for-aws-appsync-eb42d30a8791\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://medium.com/@joshua.a.kahn/building-a-dynamodb-list-resolver-for-aws-appsync-eb42d30a8791\">https://medium.com/@joshua.a.kahn/building-a-dynamodb-list-resolver-for-aws-appsync-eb42d30a8791</a></a>. Naturally, I thought it should be a simple matter of recreating the Velocity logic in Go and I’d be OK.</p>\n<h2>Problema Numero Uno</h2>\n<p>The first error told me I’m not able to add to a list that doesn’t exist. NoSQL is flexible but not magical. Velocity has lots of features to cater for this. My first update expression was this:</p>\n<div class=\"gatsby-highlight\" data-language=\"velocity\"><pre class=\"language-velocity\"><code class=\"language-velocity\">\"SET subItems = list_append(subItems, :subItem)\"</code></pre></div>\n<p>And was now this:</p>\n<div class=\"gatsby-highlight\" data-language=\"velocity\"><pre class=\"language-velocity\"><code class=\"language-velocity\">\"SET subItems = list_append(if_not_exists(subItems, :emptyList), :subItem)\"`</code></pre></div>\n<p>Our attribute values are <code class=\"language-text\">:subItem</code>, a list with the new element, and <code class=\"language-text\">:emptyList</code>, which is pretty self explanatory.</p>\n<h2>Problema Numero Dos</h2>\n<p>If you’re using the AWS Go SDK, you’ll probably think to create an attribute value that’s an empty Go slice. Trust me, wont’ work. By default, the SDK sets empty lists to NULL (see here <a href=\"https://github.com/aws/aws-sdk-go/issues/682\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://github.com/aws/aws-sdk-go/issues/682\">https://github.com/aws/aws-sdk-go/issues/682</a></a>). After playing around for a bit I was able to get an empty slice accepted:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">itemsArray <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>SubItems<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nitemsArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> subItemVariable\n\nemptyList <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>dynamodb<span class=\"token punctuation\">.</span>AttributeValue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nav<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> dynamodbattribute<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\":subItems\"</span><span class=\"token punctuation\">:</span> itemsArray<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nav<span class=\"token punctuation\">[</span><span class=\"token string\">\":emptyList\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dynamodb<span class=\"token punctuation\">.</span>AttributeValue<span class=\"token punctuation\">{</span>L<span class=\"token punctuation\">:</span> emptyList<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Seems that adding the empty slice after the initial data was marshalled works just fine, once we use the same structs the MarshalMap function uses.</p>\n<p>Happy hacking!</p>","frontmatter":{"title":"DynamoDB, Lamdbas, Go and an Empty List","tags":["golang","aws"],"date":"2018-08-31","updated":null}},"previous":{"fields":{"slug":"/blog/2018/08/15/revert-mysql-from-8-to-5-in-homebrew"},"frontmatter":{"title":"Revert MySQL from 8 to 5.7 with Homebrew"}},"next":{"fields":{"slug":"/blog/2018/08/31/micro-games-with-kontrajs"},"frontmatter":{"title":"Micro Games with Kontra.js"}}},"pageContext":{"id":"8488a051-81f1-5a78-a565-5e07a86fc78c","previousPostId":"edb3a62d-4fcc-5fe2-b29a-0f0b08842985","nextPostId":"0351e6c7-fc3e-5eb6-85e4-dbb94f71df2e"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}