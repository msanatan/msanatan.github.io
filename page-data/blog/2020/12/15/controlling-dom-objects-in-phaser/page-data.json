{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/12/15/controlling-dom-objects-in-phaser/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"31fcd165-4dff-529e-9e7a-ecde5ac7a4cf","excerpt":"I had an interesting code challenge where I needed to do a few non-gamey things with Phaser. One of them neeed me to control some DOM nodes in Phaser like…","html":"<p>I had an interesting code challenge where I needed to do a few non-gamey things with Phaser. One of them neeed me to control some DOM nodes in Phaser like sprites. As with most things, Phaser has out-of-the box support for that scenario.</p>\n<h2>DOMElement</h2>\n<p>The <a href=\"https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.DOMElement.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DOMElement</a> is a game object that can control HTML elements. You need to include this configuration to work with them:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">dom</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">createContainer</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The docs explain how it works. Phaser puts a container div on top of the game canvas. This is to ensure consistency with sizing and scaling. I like this info because if you weren’t using Phaser, you can use the same setup. The bit of magic remaining would be to map canvas coordinates to DOM coordinates relative to the parent div, as these objects are still rendered on the DOM.</p>\n<p>From there, you can use <code class=\"language-text\">this.add.dom()</code> to control a DOM element</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">domSprite <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">dom</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#domID'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The first two arguments are the x and y coordinates respectively. The last argument is the ID of the object you want to control. You can also provide the JavaScript object for a DOM node instead of it’s ID.</p>\n<p>In my code, I had to extend it add some speed properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'phaser'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMSprite</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Phaser<span class=\"token punctuation\">.</span>GameObjects<span class=\"token punctuation\">.</span>DOMElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">speedX</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">speedY</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">scene</span><span class=\"token operator\">:</span> Phaser<span class=\"token punctuation\">.</span>Scene<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Ensure that the DOM node is added to the scene we create it in</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">existing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set a default, random speed</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speedX <span class=\"token operator\">=</span> Phaser<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">Between</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>speedY <span class=\"token operator\">=</span> Phaser<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">Between</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s all there is to it! If you’d like a working example, check out this repl: <a href=\"https://repl.it/@MarcusSanatan/Control-DOM-Objects-in-Phaser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><a href=\"https://repl.it/@MarcusSanatan/Control-DOM-Objects-in-Phaser\">https://repl.it/@MarcusSanatan/Control-DOM-Objects-in-Phaser</a></a>.</p>\n<p>Happy game deving!</p>","frontmatter":{"title":"Controlling DOM Objects in Phaser","tags":["phaser","javascript","typescript","game development"],"date":"2020-12-15","updated":null}},"previous":{"fields":{"slug":"/blog/2020/11/08/loading-fonts-in-phaser-with-fontface"},"frontmatter":{"title":"Loading Fonts in Phaser with FontFace"}},"next":{"fields":{"slug":"/blog/2020/12/19/phaser-gameobject-input-events"},"frontmatter":{"title":"Phaser GameObject Input Events"}}},"pageContext":{"id":"31fcd165-4dff-529e-9e7a-ecde5ac7a4cf","previousPostId":"ecbdcd2f-3f4c-56c4-8b18-e469ae58ea27","nextPostId":"d453e56b-83ab-5454-9a86-e5b880a2f557"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}