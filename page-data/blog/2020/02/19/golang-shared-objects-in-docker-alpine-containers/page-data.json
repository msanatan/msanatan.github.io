{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/02/19/golang-shared-objects-in-docker-alpine-containers/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"abb01b12-3447-52ec-8035-499bd88aefb1","excerpt":"Hola Go devs! Golang has an amazing compile experience. It’s quick, a lot of errors are caught because of static typing, cross-compilation is effortless and the…","html":"<p>Hola Go devs!</p>\n<p>Golang has an amazing compile experience. It’s quick, a lot of errors are caught because of static typing, cross-compilation is effortless and the binary just works. Not having to install a runtime is the way it should be.</p>\n<p>At <a href=\"https://wepala.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wepala</a> where I currently work, we use Golang a lot. When it comes to deploying Go binaries, we opt for <a href=\"https://alpinelinux.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Linux Alpine</a> docker images as they’re pretty small. Who doesn’t love a container that’s 25MB?</p>\n<p>I don’t usually encounter a problem with this setup, but a recent project requires me to use <a href=\"https://golang.org/pkg/plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go plugins</a>. With plugins, instead of an executable, I create an <code class=\"language-text\">.so</code> (shared object) file when I compile my Go code.</p>\n<p>When I first tried to load my plugin with a Go app in an Alpine container, I get this error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">standard_init_linux.go:211: exec user process caused \"no such file or directory\"</code></pre></div>\n<p>At the time I figured this out, googling that error did not return many useful results. Turns out the fix was pretty simple, in your Dockerfile with the Go plugin add this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">RUN apk add --no-cache libc6-compat</code></pre></div>\n<p>It seems that my plugin had dependencies that required some C libraries that didn’t exist in the base Alpine image. I tried disabling <code class=\"language-text\">CGO</code> when building the plugins but no luck.</p>\n<p>This solution worked best for me. Hopefully, it saves you a lot of search time!</p>\n<p>Happy dockering!</p>","frontmatter":{"title":"Golang Shared Objects in Docker Alpine Containers","tags":["golang","docker"],"date":"2020-02-19","updated":null}},"previous":{"fields":{"slug":"/blog/2020/02/18/removing-terraform-orphan-resource-bug"},"frontmatter":{"title":"Removing Terraform Orphan Resource Bug"}},"next":{"fields":{"slug":"/blog/2020/04/13/my-first-arduboy-game-the-social-distance-game"},"frontmatter":{"title":"My First Arduboy Game - The Social Distance Game"}}},"pageContext":{"id":"abb01b12-3447-52ec-8035-499bd88aefb1","previousPostId":"5c0a2958-bf07-5478-95d6-6d59909451c6","nextPostId":"1b347eff-fac9-54a3-acfe-345c38f98a08"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}