{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/02/18/removing-terraform-orphan-resource-bug/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"5c0a2958-bf07-5478-95d6-6d59909451c6","excerpt":"Hey cloud workers! I’ve been doing a lot of work with Terraform and AWS lately, and it’s been a pretty positive experience. As the project, I’m working on is…","html":"<p>Hey cloud workers!</p>\n<p>I’ve been doing a lot of work with Terraform and AWS lately, and it’s been a pretty positive experience.</p>\n<p>As the project, I’m working on is fairly new, the standard for naming resources are only now being formed. Sometimes when I change the name of the resource and run <code class=\"language-text\">terraform apply</code> I get an error like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">Error: orphan resource aws_acm_certificate.this still has a non-empty state after apply; this is a bug in Terraform</code></pre></div>\n<p>The changes I made were applied successfully but the error message and exit code were bothering me. In a script, what’s a success would look like a failure!</p>\n<p>The quickest fix for me was to remove the orphan resource from Terraform’s state:</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">terraform state rm aws_acm_certificate.this</code></pre></div>\n<p>Of course, only do this if you know for certain that the resource is legitimately not meant to be in the state.</p>\n<p>Happy deploying!</p>","frontmatter":{"title":"Removing Terraform Orphan Resource Bug","tags":["terraform","aws"],"date":"2020-02-18","updated":null}},"previous":{"fields":{"slug":"/blog/2020/01/01/2019-was-a-good-year"},"frontmatter":{"title":"2019 Was a Good Year"}},"next":{"fields":{"slug":"/blog/2020/02/19/golang-shared-objects-in-docker-alpine-containers"},"frontmatter":{"title":"Golang Shared Objects in Docker Alpine Containers"}}},"pageContext":{"id":"5c0a2958-bf07-5478-95d6-6d59909451c6","previousPostId":"361b9ade-f283-5395-954b-91cca42547f7","nextPostId":"abb01b12-3447-52ec-8035-499bd88aefb1"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}