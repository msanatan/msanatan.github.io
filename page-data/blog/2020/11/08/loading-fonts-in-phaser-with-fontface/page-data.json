{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/11/08/loading-fonts-in-phaser-with-fontface/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"ecbdcd2f-3f4c-56c4-8b18-e469ae58ea27","excerpt":"For the Devtober I made a casual mobile game - Hyper Match. I built it with Phaser 3 and TypeScript, and learned quite a few new skills in the process. In my…","html":"<p>For the <a href=\"https://itch.io/jam/devtober-2020\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Devtober</a> I made a casual mobile game - <a href=\"https://itch.io/jam/devtober-2020\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hyper Match</a>. I built it with Phaser 3 and TypeScript, and learned quite a few new skills in the process.</p>\n<p>In my last Phaser game, I used the popular but old <a href=\"https://github.com/typekit/webfontloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Font Loader</a> to load all my custom fonts. I didn’t like that experience, and it’s age isn’t boding well my modern TypeScript support for all other libraries I use.</p>\n<h2>FontFace Object</h2>\n<p>After some reading I came across the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FontFace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FontFace</a> interface, what I assume is the JS counterpart for CSS’ <code class=\"language-text\">@font-face</code> rule. Like the CSS rule, it needs a name to identify the font family and the URL of the font file.</p>\n<p>This object is not part of any ECMAScript standard as yet. While unlikely, it’s still possible for the API might change. However, most major browsers have supported it for some time now.</p>\n<p>You use the FontFace’s <code class=\"language-text\">load()</code> function like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> customFont <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span>fontName<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fontUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncustomFont<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">load()</code> function returns a Promise, which beats callbacks from Web Font Loader any day. In the end, my Preload code ended up looking like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'phaser'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PreloadScene</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Phaser<span class=\"token punctuation\">.</span>Scene</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'PreloadScene'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Load images and audio</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Load custom fonts</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFonts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Gugi Regular'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fonts/Gugi-Regular.ttf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not load custom fonts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TitleScene'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">loadFonts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> font <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FontFace</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> font<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>fonts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fonts-loaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Could not load font </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I load my assets in the <code class=\"language-text\">preload()</code> function as normal. I added an <code class=\"language-text\">async</code> function <code class=\"language-text\">loadFonts()</code> which uses FontFace to load a custom font file and add it to the DOM. It <strong>needs</strong> to be added to the DOM so it can be used. Finally, I load my custom fonts in the <code class=\"language-text\">create()</code> function. I added <code class=\"language-text\">async</code> to the <code class=\"language-text\">create()</code> function so I can use <code class=\"language-text\">await</code> to resolve the font Promise.</p>\n<p><strong>Note:</strong> if you’re using TypeScript like I do, you won’t have the type definitions for the FontFace object by default. It’s not part of an ECMAScript standard as yet, TypeScript only adds definitions for objects that already approved. You can get types by installing them like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">npm i -D @types/css-font-loading-module</code></pre></div>\n<p>Happy fonting!</p>","frontmatter":{"title":"Loading Fonts in Phaser with FontFace","tags":["phaser","javascript","typescript","game development"],"date":"2020-11-08","updated":null}},"previous":{"fields":{"slug":"/blog/2020/10/20/cuadradros-trails-an-overdue-recap"},"frontmatter":{"title":"Cuadrado's Trials, an Overdue Recap"}},"next":{"fields":{"slug":"/blog/2020/12/15/controlling-dom-objects-in-phaser"},"frontmatter":{"title":"Controlling DOM Objects in Phaser"}}},"pageContext":{"id":"ecbdcd2f-3f4c-56c4-8b18-e469ae58ea27","previousPostId":"d3b02ad2-96f2-5a67-b06a-bc21def76079","nextPostId":"31fcd165-4dff-529e-9e7a-ecde5ac7a4cf"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}