{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2024/06/11/manually-configuring-an-aws-amplify-session/","result":{"data":{"site":{"siteMetadata":{"title":"Marcus Sanatan"}},"markdownRemark":{"id":"8781df42-30d4-5d75-b096-d047cb55ef2b","excerpt":"The AWS Amplify SDK is a handy JavaScript SDK to interact with AWS services. I’ve used it a lot with React. Once a few variables are configured, managing…","html":"<p>The <a href=\"https://docs.aws.amazon.com/amplify/\">AWS Amplify SDK</a> is a handy JavaScript SDK to interact with AWS services. I’ve used it a lot with React. Once a few variables are configured, managing authentication and the HTTP client to send requests to the backend becomes quite easy. AWS Cognito has very limited controls and configurations, much to the frustration of many developers (tell me if in 2024 you can change how many unsuccessful login attempts lock out an account, and adjust the lockout time for Cognito users), so it’s common for developers to create <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-authentication.html\">pre-authentication lambdas</a> or custom endpoints to handle the authentication process.</p>\n<p>Pre-authentication lambdas work well with the client, because the default code for logging in, logging out, signing up, and resetting passwords remains unchanged. However, if you have a pre-existing authentication endpoint that you want to integrate with AWS Amplify, instead of porting the logic to a lambda, you can manually set up a session with AWS Amplify.</p>\n<h2>Backend requirements</h2>\n<p>There are some steps we need to take on our backend and on AWS Cognito so that we can successfully authenticate users via an API and use it in our frontend. You must return at least 3 properties on the backend, all strings:</p>\n<ul>\n<li><code class=\"language-text\">idToken</code>: The JWT token that contains the user’s information</li>\n<li><code class=\"language-text\">accessToken</code>: The JWT token that allows the user to access the API</li>\n<li><code class=\"language-text\">refreshToken</code>: The JWT token that allows the user to refresh the <code class=\"language-text\">accessToken</code></li>\n</ul>\n<p>On AWS Cognito, ensure that the <strong>Remember Device</strong> option is set to “Don’t remember”. If this is set to “remember”, while the original authentication will work, when AWS Amplify tries to refresh the token it will fail (because the backend device isn’t the same as the client!).</p>\n<h2>Manually configuring the session</h2>\n<p>On the frontend, create a function like this that accepts the tokens and configures the session:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  CognitoAccessToken<span class=\"token punctuation\">,</span>\n  CognitoIdToken<span class=\"token punctuation\">,</span>\n  CognitoRefreshToken<span class=\"token punctuation\">,</span>\n  CognitoUser<span class=\"token punctuation\">,</span>\n  CognitoUserPool<span class=\"token punctuation\">,</span>\n  CognitoUserSession<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"amazon-cognito-identity-js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Auth <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"aws-amplify\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setupAmplifySession</span><span class=\"token punctuation\">(</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Take the username from the form so they can sign up</span>\n  accessToken<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Taken from the API response</span>\n  idToken<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Taken from the API response</span>\n  refreshToken<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Taken from the API response</span>\n  userPoolId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Cognito user pool ID</span>\n  appClientId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// Cognito app client ID</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create Cognito tokens</span>\n  <span class=\"token keyword\">const</span> accessCognitoToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CognitoAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    AccessToken<span class=\"token operator\">:</span> accessToken<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> idCognitoToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CognitoIdToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> IdToken<span class=\"token operator\">:</span> idToken <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> refreshCognitoToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CognitoRefreshToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    RefreshToken<span class=\"token operator\">:</span> refreshToken<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a new user session with the tokens</span>\n  <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CognitoUserSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    AccessToken<span class=\"token operator\">:</span> accessCognitoToken<span class=\"token punctuation\">,</span>\n    IdToken<span class=\"token operator\">:</span> idCognitoToken<span class=\"token punctuation\">,</span>\n    RefreshToken<span class=\"token operator\">:</span> refreshCognitoToken<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a user pool object</span>\n  <span class=\"token keyword\">const</span> userPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CognitoUserPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    UserPoolId<span class=\"token operator\">:</span> userPoolId<span class=\"token punctuation\">,</span>\n    ClientId<span class=\"token operator\">:</span> appClientId<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Then create a new user object from that pool</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CognitoUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    Username<span class=\"token operator\">:</span> username<span class=\"token punctuation\">,</span>\n    Pool<span class=\"token operator\">:</span> userPool<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Connect user to the session</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">setSignInUserSession</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Update the user session in local storage</span>\n  <span class=\"token keyword\">await</span> Auth<span class=\"token punctuation\">.</span><span class=\"token function\">currentSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There you have it. Once your backend returns all the tokens, you can use the above code to set up your session with AWS Amplify and enjoy all the benefits of using the SDK, even with your custom flow.</p>","frontmatter":{"title":"Manually Configuring an AWS Amplify Session","tags":["software development","javascript","react","aws"],"date":"2024-06-11","updated":null}},"previous":{"fields":{"slug":"/blog/2024/04/17/soft-skills-software-development-and-ai"},"frontmatter":{"title":"Soft Skills, Software Development, and AI"}},"next":{"fields":{"slug":"/blog/2024/07/23/automated-unity-builds-from-github-to-itchio"},"frontmatter":{"title":"Automated Unity Builds from GitHub to itch.io"}}},"pageContext":{"id":"8781df42-30d4-5d75-b096-d047cb55ef2b","previousPostId":"b5343d8c-4289-58d6-9c5f-e3680b433cc1","nextPostId":"602dc378-2b56-5845-995f-13776573c8d3"}},"staticQueryHashes":["1391858338"],"slicesMap":{}}